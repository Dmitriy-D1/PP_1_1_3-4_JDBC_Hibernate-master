package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import java.util.List;

public class UserDaoHibernateImpl implements UserDao {
    public UserDaoHibernateImpl() {

    }


    @Override
    public void createUsersTable() {

        Configuration configuration = new Configuration().addAnnotatedClass(User.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.getCurrentSession();

        try {
            session.beginTransaction();

            String sql = "CREATE TABLE IF NOT EXISTS users(" +
                    "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "name varchar, " +
                    "lastname varchar, " +
                    "age smallint)";

            session.createSQLQuery(sql).addEntity(User.class).executeUpdate();

            session.getTransaction().commit();
        } finally {
            sessionFactory.close();
        }
    }

    @Override
    public void dropUsersTable() {

        Configuration configuration = new Configuration().addAnnotatedClass(User.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.getCurrentSession();

        try {
            session.beginTransaction();

            String sql = "DROP TABLE IF EXISTS users";

            session.createSQLQuery(sql).addEntity(User.class).executeUpdate();

            session.getTransaction().commit();
        } finally {
            sessionFactory.close();
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {

        Configuration configuration = new Configuration().addAnnotatedClass(User.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.getCurrentSession();

        try {
            session.beginTransaction();

            User user = new User(name, lastName, age);

            session.save(user);

            session.getTransaction().commit();
        } finally {
            sessionFactory.close();
        }

    }

    @Override
    public void removeUserById(long id) {

        Configuration configuration = new Configuration().addAnnotatedClass(User.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.getCurrentSession();


        try {
            session.beginTransaction();

            session.createQuery("DELETE FROM User WHERE id = "+id).executeUpdate();

            session.getTransaction().commit();
        } finally {
            sessionFactory.close();
        }
    }

    @Override
    public List<User> getAllUsers() {

        Configuration configuration = new Configuration().addAnnotatedClass(User.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.getCurrentSession();

        List<User> list;

        try {
            session.beginTransaction();

            list = session.createQuery("SELECT u FROM User u", User.class).getResultList();

        } finally {
            sessionFactory.close();
        }
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i).toString());
        }

        return list;
    }

    @Override
    public void cleanUsersTable() {

        Configuration configuration = new Configuration().addAnnotatedClass(User.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.getCurrentSession();

        try {
            session.beginTransaction();

            session.createSQLQuery("TRUNCATE TABLE users RESTART IDENTITY").executeUpdate();

            session.getTransaction().commit();
        } finally {
            sessionFactory.close();
        }
    }
}
