package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class UserDaoJDBCImpl implements UserDao {

    private static final Logger logger = Logger.getLogger(UserDaoJDBCImpl.class.getName());

    public UserDaoJDBCImpl() {

    }

    public void createUsersTable() {
        try (Connection connection = Util.getConnection();
             PreparedStatement pst = connection.prepareStatement("CREATE TABLE IF NOT EXISTS users(" +
                     "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                     "name varchar, " +
                     "lastname varchar, " +
                     "age smallint)")){

            logger.log(Level.INFO, "Создание таблицы \"users\"");

            pst.executeUpdate();

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    public void dropUsersTable() {
        try (Connection connection = Util.getConnection();
             PreparedStatement pst = connection.prepareStatement("DROP TABLE if EXISTS users")){

            logger.log(Level.INFO, "Удаление таблицы \"users\"");

            pst.executeUpdate();

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    public void saveUser(String name, String lastName, byte age) {
        try (Connection connection = Util.getConnection();
             PreparedStatement pst = connection.prepareStatement("INSERT INTO " +
                     "users (name, lastname, age) VALUES (?, ?, ?)")) {

            pst.setString(1, name);
            pst.setString(2, lastName);
            pst.setByte(3, age);

            logger.log(Level.INFO, "User с именем \""  + name + "\" добавлен в базу данных");

            pst.executeUpdate();


        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }

    public void removeUserById(long id) {
        try (Connection connection = Util.getConnection();
             PreparedStatement pst = connection.prepareStatement("DELETE FROM users " +
                     "WHERE id = ?")) {

            pst.setLong(1, id);

            logger.log(Level.INFO, "User с id - \""  + id + "\" удален");

            pst.executeUpdate();

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    public List<User> getAllUsers() {

        List list = new ArrayList<User>();

        try (Connection connection = Util.getConnection();
             PreparedStatement pst = connection.prepareStatement("SELECT * FROM users");
             ResultSet rs = pst.executeQuery()) {

            logger.log(Level.INFO, "Получаем все данные из таблицы \"users\"");

            while (rs.next()) {

                Long id = rs.getLong(1);
                String name = rs.getString(2);
                String surname = rs.getString(3);
                Byte age = rs.getByte(4);

                User user = new User(name, surname, age);
                user.setId(id);
                list.add(user);
            }

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i).toString());
        }

        return list;
    }

    public void cleanUsersTable() {

        try (Connection connection = Util.getConnection();
             PreparedStatement pst = connection.prepareStatement("TRUNCATE TABLE users " +
                     "RESTART IDENTITY ")) {

            logger.log(Level.INFO, "Очистка содержания таблицы \"users\"");

            pst.executeUpdate();

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }
}
